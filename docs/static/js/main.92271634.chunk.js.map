{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftEXpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifts","map","img","id","title","images","downsized_medium","GiftGridItem","className","alt","src","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiftEXpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAMlB,SAEI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAQ,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAWH,GADvF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACPC,QAAQC,IAAIF,GACNG,EAAQH,EAAKI,KAAK,SAAAC,GAAO,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAVvB,kBAeZQ,GAfY,4CAAF,sDCERO,EAAe,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IAEjC,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKL,EAAOM,IAAKlB,IACtB,4BAAIY,QCHHO,EAAW,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAGtB,ECCwB,SAACA,GAEzB,MAA0Bd,mBACtB,CACIqB,KAAM,GACNe,SAAS,IAHjB,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OAfAC,qBAAU,WAEN1B,EAASC,GAAU0B,MAEf,SAAAC,GAEIH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKvB,CAACtB,IAEIuB,ED5BwBK,CAAa5B,GAAhCe,EAAZ,EAAOR,KAAae,EAApB,EAAoBA,QAEpB,OACI,qCACI,6BAAKtB,IACHsB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAAgCA,GAAbA,EAAIC,aEXhDgB,EAAgB,WAEzB,MAAoC3C,mBAAS,CAAC,aAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAMA,OACI,gCACI,wCACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQ6C,EAAWnB,KAAK,SAAAX,GAAQ,OAAI,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,Y,MCd/D+B,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.92271634.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setImputValue] = useState('');\r\n    \r\n    const handleImputChange = (e)=>{\r\n        setImputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n\r\n            setCategories(cats=>[ inputValue, ...cats ]);\r\n            setImputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = {handleImputChange}>\r\n\r\n            </input>\r\n        </form>\r\n            \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifts= async (category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=n6vX91QmMb1fHlmkYaq7A4Cj8WP8R2zZ&q=${encodeURI( category )}&limit=10`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    console.log(data);\r\n    const gifts = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n        \r\n    });\r\n\r\n    return gifts;\r\n\r\n    // setstateImages(gifts);\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GiftGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img alt={title} src={url}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GiftGridItem } from './GiftGridItem';\r\n\r\nexport const GiftGrid = ({category}) => {\r\n\r\n    //Desustructuracion de los datos de retorno, y renombramos el valos de data\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            { loading && <p>Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {/* Mandamos los valores al componente individualmente cap 75 */}\r\n                { images.map((img)=>( <GiftGridItem key={img.id} {... img}/>))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifts } from \"../helpers/getGifs\";\r\n\r\n/**\r\n * Retornamos el stado de una funcion con los datos\r\n * @param {*} category \r\n * @returns \r\n */\r\nexport const useFetchGifs = (category) => {\r\n    //Estado inicial\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        }\r\n    );\r\n\r\n    /**\r\n     * Evalia el efecto cuando la categoria cambia y se dispara\r\n     */\r\n    useEffect(()=>{\r\n        //Promesa\r\n        getGifts(category).then(\r\n            //Retorno de los datos\r\n            imgs =>{\r\n                //Nuevo state\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            }\r\n\r\n        );\r\n    },[category]);\r\n\r\n    return state;\r\n    \r\n}\r\n","import React , {useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GiftGrid } from './components/GiftGrid';\r\n\r\nexport const GiftEXpertApp = () => {\r\n    // const categories = ['One puch', 'Samurai x', 'Dragon ball']\r\n    const [categories, setCategories] = useState(['One puch']);\r\n\r\n    /* const handleAdd = () =>{\r\n        setCategories(['HunterxHunter', ...categories]);\r\n    } */\r\n\r\n    return (\r\n        <div>\r\n            <h2> hola </h2>\r\n            <hr></hr>\r\n            <AddCategory setCategories={setCategories} />\r\n            <ol>\r\n                {\r\n                    categories.map( category => <GiftGrid key={category} category={category} />)\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftEXpertApp } from './GiftEXpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <GiftEXpertApp/> ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}